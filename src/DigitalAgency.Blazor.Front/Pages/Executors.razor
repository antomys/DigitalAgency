@page "/executors"
@using System.Text.Json
@using DigitalAgency.Dal.Entities
@using Task = System.Threading.Tasks.Task
@inject IHttpClientFactory _executorFactory;


<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<link href="css/site.css" rel="stylesheet" />

<h1>Executors</h1>
<p />
<a class="btn btn-primary" href="addexecutor">&#10002;Add Executor</a>

<p />
@if (ExecutorsList == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td><b>Id</b></td>
                <td><b>First name</b></td>
                <td><b>Middle name</b></td>
                <td><b>Last name</b></td>
                <td><b>Phone number</b></td>
                <td><b>Position</b></td>
            </tr>
        </thead>
        <tbody>

            @foreach (var executor in ExecutorsList)
            {
            <tr>
                <td>@executor.Id</td>
                <td>@executor.FirstName</td>
                <td>@executor.MiddleName</td>
                <td>@executor.LastName</td>
                <td>@executor.PhoneNumber</td>
                <td>@executor.Position</td>
                <td>
                    <a class="nav-link" href="editexecutor/@executor.Id">
                        <span class="oi oi-pencil" aria-hidden="true"></span>Edit
                    </a>
                    <a class="nav-link" href="deleteExecutor/@executor.Id">
                        <span class="oi oi-trash" aria-hidden="true"></span>Delete
                    </a>
                </td>
            </tr>
            }

        </tbody>
    </table>
}

@code 
{
    protected List<Executor> ExecutorsList { get; set; }
    protected string Info;

    protected override async Task OnInitializedAsync()
    {

        var mechanic = _executorFactory.CreateClient();
        var result = await mechanic.GetAsync("http://localhost:8443/Client/executor");

        Info = await result.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        var deserialized = JsonSerializer.Deserialize<List<Executor>>(Info, options);
        ExecutorsList = deserialized?.ToList() ;
    }

}