@page "/editclient/{id}"
@using System.Text
@using System.Text.Json
@using DigitalAgency.Dal.Entities
@using Task = System.Threading.Tasks.Task
@inject IHttpClientFactory _clientFactory;


<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<link href="css/site.css" rel="stylesheet" />

<h1>Update client</h1>
<p />
@if (Client == null)
{
    <div>Loading...</div>
}
else
{
    <table>
        <div class="form-group">
            <input for="Name" disabled="true" class="form-control" @bind="@Client.Id" />
        </div>
        <tr>
            <td>First name:</td>
            <td><input @bind="FirstName" /></td>
        </tr>
        <tr>
            <td>Middle name:</td>
            <td><input @bind="MiddleName" /></td>
        </tr>
        <tr>
            <td>Last name:</td>
            <td><input @bind="LastName" /></td>
        </tr>
        <tr>
            <td>Phone number:</td>
            <td><input @bind="PhoneNumber" /></td>
        </tr>
    </table>
}

<p />
<a class="btn btn-secondary" href="clients">Back</a>
<button class="btn btn-primary" @onclick="UpdateClientAsync">&#10004;Save</button> @Alert
<p />

@code {
    protected Client Client { get; set; }
    protected string FirstName { get; set; }
    protected string MiddleName { get; set; }
    protected string LastName { get; set; }
    protected string PhoneNumber { get; set; }
    protected string Alert { get; set; }
    protected string Info;

    [Parameter]
    public string Id { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        var mechanic = _clientFactory.CreateClient();
        var result = await mechanic.GetAsync("http://localhost:8443/Client");

        Info = await result.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        var deserialized = JsonSerializer.Deserialize<List<Client>>(Info, options);
        Client = deserialized?.Where(x=>x.Id.ToString() == Id).First();
        FirstName = Client?.FirstName;
        LastName = Client?.LastName;
        MiddleName = Client?.MiddleName;
        PhoneNumber = Client?.PhoneNumber;

    }

    protected async Task UpdateClientAsync()
    {
        Alert = " ";
        if (FirstName == string.Empty || MiddleName == string.Empty || LastName == string.Empty || PhoneNumber == string.Empty)
        {
            Alert = "Fill all fields!";
        }
        var client = _clientFactory.CreateClient();
        Client.FirstName = FirstName;
        Client.LastName = LastName;
        Client.MiddleName = MiddleName;
        Client.PhoneNumber = PhoneNumber;
        var content = new StringContent(JsonSerializer.Serialize(Client), Encoding.UTF8, "application/json");
        var response = await client.PutAsync("http://localhost:8443/Client", content);
        
        if (response.IsSuccessStatusCode)
        {
            Alert = "Client successfully added!";
        }
        else
        {
            Alert = await response.Content.ReadAsStringAsync();
        }
    }
}