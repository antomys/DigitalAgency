@page "/projects"
@using System.Text.Json
@using DigitalAgency.Bll.Models
@using Task = System.Threading.Tasks.Task
@inject IHttpClientFactory _clientFactory;
@inject NavigationManager _uriHelper;


<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<link href="css/site.css" rel="stylesheet" />

<h1>Projects</h1>
<p />
<a class="btn btn-primary" href="addproject">&#10002;Add project</a>

<p />
@if (ProjectsList == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td><b>Id</b></td>
                <td><b>Project Name</b></td>
                <td><b>Description</b></td>
                <td><b>Link</b></td>
            </tr>
        </thead>
        <tbody>

            @foreach (var project in ProjectsList)
            {
                <tr>
                    <td>@project.Id</td>
                    <td>@project.ProjectName</td>
                    <td>@project.ProjectDescription</td>
                    <td>@project.ProjectLink</td>
                    <td>
                        <a class="nav-link" href="editproject/@project.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>Edit
                        </a>
                        <a class="btn btn-primary"  @onclick="@(e => DeleteProject(project.Id))">
                            <span class="oi oi-trash" aria-hidden="true"></span>Delete
                        </a>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {

    private List<ProjectModel> ProjectsList { get; set; }
    private string _info;

    protected override async Task OnInitializedAsync()
    {

        var client = _clientFactory.CreateClient();
        var result = await client.GetAsync("http://localhost:8443/Project/GetProject");

        _info = await result.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        ProjectsList = JsonSerializer.Deserialize<List<ProjectModel>>(_info,options);
    }

    private async Task DeleteProject(int id)
    {
        var client = _clientFactory.CreateClient();
        var result = await client.DeleteAsync($"http://localhost:8443/Project/DeleteProject?id={id}");

        if (result.IsSuccessStatusCode)
        {
            _uriHelper.NavigateTo(_uriHelper.Uri, forceLoad: true);
        }
    }
}