@page "/addorder"
@using System.Text
@using DigitalAgency.Dal.Entities
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using Task = System.Threading.Tasks.Task
@inject IHttpClientFactory _clientFactory;



<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<link href="css/site.css" rel="stylesheet" />


<h1>Add new order</h1>
@if(Clients == null 
    || Executors == null 
    || Projects == null)  
{  
<p>  
    <em>Loading ...</em>  
</p>  
}
else
{
    <p />

    <table>
        <tr>
            <td>Client: </td>
            <select class="custom-select" @onchange="OnClientValueChanged" title="Region is required ">
                <option value="Select" selected disabled="disabled">Choose Owner</option>
                @foreach (var client in Clients)
                {
                    <option value="@client.Id">@client.FirstName @client.LastName</option>
                }
            </select>
        </tr>
        <tr>
            <td>Project: </td>
            <select class="custom-select" @onchange="OnCarValueChanged" title="Region is required ">
                <option value="Select" selected disabled="disabled">Choose Car</option>
                @foreach (var car in Projects)
                {
                    <option value="@car.Id">@car.ProjectName @car.ProjectDescription</option>
                }
            </select> 
        </tr>
        <tr>
            <td>Executor: </td>
            <select class="custom-select" @onchange="OnMechanicValueChanged" title="Region is required ">
                <option value="Select" selected disabled="disabled">Choose Mechanic</option>
                @foreach (var client in Executors)
                {
                    <option value="@client.Id">@client.FirstName @client.LastName</option>
                }
            </select>
        </tr>
        <tr>
            <td>Scheduled date</td>
            <input type="date" @bind="ScheduledDate"/>
        </tr>
    </table>
}
    <p />
    <a class="btn btn-secondary" href="orders">Back</a>
    <button type="button" class="btn btn-primary" @onclick="AddNewOrder">&#10004;Add</button> @Alert
    <p />

@code {
    protected List<Client> Clients { get; set; }
    protected List<Executor> Executors{get; set; }
    protected List<Project> Projects { get; set; }
    protected string Alert { get; set; }
    
    [Parameter]
    public DateTime ScheduledDate { get; set; }
    [Parameter]  
    public EventCallback < DateTime> DateChanged { get; set; } 
    
    [Parameter]  
    public string ValueClient { get; set; }  
    [Parameter]  
    public EventCallback < string > ValueClientChanged { get; set; }  
    
    [Parameter]  
    public string ValueMechanic { get; set; }  
    [Parameter]  
    public EventCallback < string > ValueMechanicChanged { get; set; }  
    
    [Parameter]  
    public string ValueCar { get; set; }  
    [Parameter]  
    public EventCallback < string > ValueCarChanged { get; set; }  

    protected override async Task OnInitializedAsync()
    {
        var client = _clientFactory.CreateClient();
        var result = await client.GetAsync("http://localhost:8443/Client");

        var info = await result.Content.ReadAsStringAsync();
        ScheduledDate = DateTime.Now;
        var deserialized = JsonConvert.DeserializeObject<List<Client>>(info);
        Clients = deserialized?.ToList();
        ScheduledDate = DateTime.Now;

        result = await client.GetAsync("http://localhost:8443/Client/executor");
        info = await result.Content.ReadAsStringAsync();
        var newDeserialized = JsonConvert.DeserializeObject<List<Executor>>(info);
        Executors = newDeserialized?.ToList();
        
        Projects = new List<Project>();
    }
    
    private Task OnClientValueChanged(ChangeEventArgs e) {  
        ValueClient = e.Value.ToString();  
         
        var client = _clientFactory.CreateClient();
        var result = client.GetAsync("http://localhost:8443/Project").Result;
        var info = result.Content.ReadAsStringAsync().Result;
        var newDeserialized = JsonConvert.DeserializeObject<List<Project>>(info);
        Projects = newDeserialized.Where(x=> x.OwnerId.ToString() == ValueClient).ToList();
        return ValueClientChanged.InvokeAsync(ValueClient); 
    }  
    private Task OnMechanicValueChanged(ChangeEventArgs e) {  
        ValueMechanic = e.Value.ToString();
        return ValueMechanicChanged.InvokeAsync(ValueMechanic); 
    }  
    private Task OnCarValueChanged(ChangeEventArgs e) {  
        ValueCar = e.Value.ToString();
        return ValueCarChanged.InvokeAsync(ValueMechanic); 
    } 

    protected async Task AddNewOrder()
    {
        Alert = " ";
        var client = _clientFactory.CreateClient();
        //ScheaduleViewModel newOrder = new ScheaduleViewModel { FirstName = FirstName, MiddleName = MiddleName, LastName = LastName, ClientPhone = ClientPhone, CarMake = CarMake, CarModel = CarModel, CarPlate = CarPlate, CarColor = CarColor, ScheduledDate = ScheduledDate, };
        
        var serviceOrder = new Order
        {
            ClientId = int.Parse(ValueClient),
            ExecutorId = int.Parse(ValueMechanic),
            ProjectId = int.Parse(ValueCar),
            ScheduledTime = ScheduledDate,
            CreationDate = DateTime.Now,
            State = "New"
        };
        
        var content = new StringContent(JsonSerializer.Serialize(serviceOrder), Encoding.UTF8, "application/json");
       var response =  await client.PostAsync("http://localhost:8443/Order/createOrder", content);
        
        if (response.IsSuccessStatusCode)
        {
            Alert = "Added new order";
        }
        else
        {
            Alert = await response.Content.ReadAsStringAsync();
        }

    }

}
